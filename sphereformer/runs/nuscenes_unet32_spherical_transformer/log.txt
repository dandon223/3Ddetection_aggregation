[07/27 11:21:40] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 16
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:53903
distributed: True
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: True
ngpus_per_node: 4
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: True
train_gpu: [0, 1, 2, 3]
transformer_lr_scale: 0.1
use_amp: True
use_tta: False
use_xyz: True
val: False
vote_num: 4
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: None
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 16
world_size: 4
xyz_norm: False
[07/27 11:21:40] main-logger INFO: use SyncBN
[07/27 11:21:55] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 16
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:54481
distributed: True
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: True
ngpus_per_node: 4
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: True
train_gpu: [0, 1, 2, 3]
transformer_lr_scale: 0.1
use_amp: True
use_tta: False
use_xyz: True
val: False
vote_num: 4
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: None
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 16
world_size: 4
xyz_norm: False
[07/27 11:21:55] main-logger INFO: use SyncBN
[07/27 11:22:04] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 16
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:53293
distributed: True
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: True
ngpus_per_node: 4
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: True
train_gpu: [0, 1, 2, 3]
transformer_lr_scale: 0.1
use_amp: True
use_tta: False
use_xyz: True
val: False
vote_num: 4
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: None
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 16
world_size: 4
xyz_norm: False
[07/27 11:22:04] main-logger INFO: use SyncBN
[07/27 11:24:34] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 16
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:6789
distributed: False
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: False
ngpus_per_node: 1
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: False
train_gpu: [0]
transformer_lr_scale: 0.1
use_amp: True
use_tta: False
use_xyz: True
val: False
vote_num: 4
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: None
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 16
world_size: 1
xyz_norm: False
[07/27 11:24:37] main-logger INFO: => creating model ...
[07/27 11:24:37] main-logger INFO: Classes: 16
[07/27 11:24:37] main-logger INFO: DataParallel(
  (module): Semantic(
    (input_conv): SparseSequential(
      (0): SubMConv3d(4, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    )
    (unet): UBlock(
      (blocks): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
      (transformer_block): SphereFormer(
        (norm1): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (attn): SparseMultiheadSASphereConcat(
          (qkv): Linear(in_features=32, out_features=96, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=True)
          (proj): Linear(in_features=32, out_features=32, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=True)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=32, out_features=128, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=128, out_features=32, bias=True)
          (drop): Dropout(p=0.0, inplace=True)
        )
      )
      (conv): SparseSequential(
        (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseConv3d(32, 64, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (u): UBlock(
        (blocks): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
        (transformer_block): SphereFormer(
          (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (attn): SparseMultiheadSASphereConcat(
            (qkv): Linear(in_features=64, out_features=192, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=True)
            (proj): Linear(in_features=64, out_features=64, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=True)
          )
          (drop_path): DropPath(drop_prob=0.050)
          (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=64, out_features=256, bias=True)
            (act): GELU()
            (fc2): Linear(in_features=256, out_features=64, bias=True)
            (drop): Dropout(p=0.0, inplace=True)
          )
        )
        (conv): SparseSequential(
          (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseConv3d(64, 128, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (u): UBlock(
          (blocks): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
          (transformer_block): SphereFormer(
            (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (attn): SparseMultiheadSASphereConcat(
              (qkv): Linear(in_features=128, out_features=384, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=True)
              (proj): Linear(in_features=128, out_features=128, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=True)
            )
            (drop_path): DropPath(drop_prob=0.100)
            (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=128, out_features=512, bias=True)
              (act): GELU()
              (fc2): Linear(in_features=512, out_features=128, bias=True)
              (drop): Dropout(p=0.0, inplace=True)
            )
          )
          (conv): SparseSequential(
            (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseConv3d(128, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (u): UBlock(
            (blocks): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
            (transformer_block): SphereFormer(
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (attn): SparseMultiheadSASphereConcat(
                (qkv): Linear(in_features=256, out_features=768, bias=True)
                (attn_drop): Dropout(p=0.0, inplace=True)
                (proj): Linear(in_features=256, out_features=256, bias=True)
                (proj_drop): Dropout(p=0.0, inplace=True)
              )
              (drop_path): DropPath(drop_prob=0.150)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=256, out_features=1024, bias=True)
                (act): GELU()
                (fc2): Linear(in_features=1024, out_features=256, bias=True)
                (drop): Dropout(p=0.0, inplace=True)
              )
            )
            (conv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (u): UBlock(
              (blocks): SparseSequential(
                (block0): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
                (block1): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
              )
              (transformer_block): SphereFormer(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): SparseMultiheadSASphereConcat(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=True)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=True)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=True)
                )
              )
            )
            (deconv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseInverseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (blocks_tail): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): SubMConv3d(512, 256, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(512, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(512, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
          )
          (deconv): SparseSequential(
            (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseInverseConv3d(256, 128, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (blocks_tail): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): SubMConv3d(256, 128, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(256, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
        )
        (deconv): SparseSequential(
          (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseInverseConv3d(128, 64, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (blocks_tail): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): SubMConv3d(128, 64, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(128, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
      )
      (deconv): SparseSequential(
        (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseInverseConv3d(64, 32, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (blocks_tail): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): SubMConv3d(64, 32, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
    )
    (output_layer): SparseSequential(
      (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
      (1): ReLU()
    )
    (linear): Linear(in_features=32, out_features=16, bias=True)
  )
)
[07/27 11:24:37] main-logger INFO: #Model parameters: 32311616
[07/27 11:24:37] main-logger INFO: class_weight: None
[07/27 11:24:37] main-logger INFO: loss_name: ce_loss
[07/27 11:24:37] main-logger INFO: train_data samples: '5512'
[07/27 11:24:37] main-logger INFO: val_data samples: '28637'
[07/27 11:24:37] main-logger INFO: scheduler: Poly. scheduler_update: step
[07/27 11:24:37] main-logger INFO: lr: [0.006, 0.0006000000000000001]
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 283485 to 248063
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 282015 to 246285
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 270258 to 238286
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 279262 to 242685
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 287142 to 249793
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 280119 to 247177
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 277181 to 244848
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 280539 to 245834
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 13, points from 286825 to 235873
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 13, points from 286411 to 234155
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 267535 to 236343
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 270611 to 235322
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 279601 to 245366
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 13, points from 289037 to 232974
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 272959 to 237760
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 282336 to 244125
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 274892 to 236467
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 15, points from 267375 to 248607
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 277604 to 243001
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 283403 to 246981
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 280676 to 245109
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 13, points from 288509 to 232368
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 269257 to 233544
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 278775 to 243233
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 13, points from 281251 to 233837
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 269584 to 233971
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 279751 to 242711
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 286657 to 249203
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 271069 to 236209
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 279787 to 243617
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 273215 to 238654
[07/27 11:24:38] main-logger WARNING: batch_size shortened from 16 to 14, points from 281047 to 243930
[07/27 11:24:39] main-logger WARNING: batch_size shortened from 16 to 15, points from 266473 to 248110
[07/27 11:38:57] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 16
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:58463
distributed: True
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: True
ngpus_per_node: 4
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: True
train_gpu: [0, 1, 2, 3]
transformer_lr_scale: 0.1
use_amp: True
use_tta: True
use_xyz: True
val: True
vote_num: 1
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: ./model_nuscenes
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 16
world_size: 4
xyz_norm: False
[07/27 11:38:57] main-logger INFO: use SyncBN
[07/27 11:39:23] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 16
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:6789
distributed: False
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: False
ngpus_per_node: 1
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: False
train_gpu: [0]
transformer_lr_scale: 0.1
use_amp: True
use_tta: True
use_xyz: True
val: True
vote_num: 1
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: ./model_nuscenes
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 16
world_size: 1
xyz_norm: False
[07/27 11:39:24] main-logger INFO: => creating model ...
[07/27 11:39:24] main-logger INFO: Classes: 16
[07/27 11:39:24] main-logger INFO: DataParallel(
  (module): Semantic(
    (input_conv): SparseSequential(
      (0): SubMConv3d(4, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    )
    (unet): UBlock(
      (blocks): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
      (transformer_block): SphereFormer(
        (norm1): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (attn): SparseMultiheadSASphereConcat(
          (qkv): Linear(in_features=32, out_features=96, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=True)
          (proj): Linear(in_features=32, out_features=32, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=True)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=32, out_features=128, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=128, out_features=32, bias=True)
          (drop): Dropout(p=0.0, inplace=True)
        )
      )
      (conv): SparseSequential(
        (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseConv3d(32, 64, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (u): UBlock(
        (blocks): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
        (transformer_block): SphereFormer(
          (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (attn): SparseMultiheadSASphereConcat(
            (qkv): Linear(in_features=64, out_features=192, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=True)
            (proj): Linear(in_features=64, out_features=64, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=True)
          )
          (drop_path): DropPath(drop_prob=0.050)
          (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=64, out_features=256, bias=True)
            (act): GELU()
            (fc2): Linear(in_features=256, out_features=64, bias=True)
            (drop): Dropout(p=0.0, inplace=True)
          )
        )
        (conv): SparseSequential(
          (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseConv3d(64, 128, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (u): UBlock(
          (blocks): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
          (transformer_block): SphereFormer(
            (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (attn): SparseMultiheadSASphereConcat(
              (qkv): Linear(in_features=128, out_features=384, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=True)
              (proj): Linear(in_features=128, out_features=128, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=True)
            )
            (drop_path): DropPath(drop_prob=0.100)
            (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=128, out_features=512, bias=True)
              (act): GELU()
              (fc2): Linear(in_features=512, out_features=128, bias=True)
              (drop): Dropout(p=0.0, inplace=True)
            )
          )
          (conv): SparseSequential(
            (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseConv3d(128, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (u): UBlock(
            (blocks): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
            (transformer_block): SphereFormer(
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (attn): SparseMultiheadSASphereConcat(
                (qkv): Linear(in_features=256, out_features=768, bias=True)
                (attn_drop): Dropout(p=0.0, inplace=True)
                (proj): Linear(in_features=256, out_features=256, bias=True)
                (proj_drop): Dropout(p=0.0, inplace=True)
              )
              (drop_path): DropPath(drop_prob=0.150)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=256, out_features=1024, bias=True)
                (act): GELU()
                (fc2): Linear(in_features=1024, out_features=256, bias=True)
                (drop): Dropout(p=0.0, inplace=True)
              )
            )
            (conv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (u): UBlock(
              (blocks): SparseSequential(
                (block0): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
                (block1): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
              )
              (transformer_block): SphereFormer(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): SparseMultiheadSASphereConcat(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=True)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=True)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=True)
                )
              )
            )
            (deconv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseInverseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (blocks_tail): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): SubMConv3d(512, 256, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(512, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(512, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
          )
          (deconv): SparseSequential(
            (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseInverseConv3d(256, 128, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (blocks_tail): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): SubMConv3d(256, 128, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(256, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
        )
        (deconv): SparseSequential(
          (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseInverseConv3d(128, 64, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (blocks_tail): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): SubMConv3d(128, 64, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(128, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
      )
      (deconv): SparseSequential(
        (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseInverseConv3d(64, 32, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (blocks_tail): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): SubMConv3d(64, 32, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
    )
    (output_layer): SparseSequential(
      (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
      (1): ReLU()
    )
    (linear): Linear(in_features=32, out_features=16, bias=True)
  )
)
[07/27 11:39:24] main-logger INFO: #Model parameters: 32311616
[07/27 11:39:24] main-logger INFO: class_weight: None
[07/27 11:39:24] main-logger INFO: loss_name: ce_loss
[07/27 11:39:24] main-logger INFO: => no weight found at './model_nuscenes'
[07/27 11:39:25] main-logger INFO: train_data samples: '5512'
[07/27 11:39:25] main-logger INFO: val_data samples: '28637'
[07/27 11:39:25] main-logger INFO: scheduler: Poly. scheduler_update: step
[07/27 11:39:25] main-logger INFO: >>>>>>>>>>>>>>>> Start Evaluation >>>>>>>>>>>>>>>>
[07/27 11:40:18] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 16
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:6789
distributed: False
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: False
ngpus_per_node: 1
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: False
train_gpu: [0]
transformer_lr_scale: 0.1
use_amp: True
use_tta: True
use_xyz: True
val: True
vote_num: 1
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: ./model_nuscenes/archive
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 16
world_size: 1
xyz_norm: False
[07/27 11:40:20] main-logger INFO: => creating model ...
[07/27 11:40:20] main-logger INFO: Classes: 16
[07/27 11:40:20] main-logger INFO: DataParallel(
  (module): Semantic(
    (input_conv): SparseSequential(
      (0): SubMConv3d(4, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    )
    (unet): UBlock(
      (blocks): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
      (transformer_block): SphereFormer(
        (norm1): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (attn): SparseMultiheadSASphereConcat(
          (qkv): Linear(in_features=32, out_features=96, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=True)
          (proj): Linear(in_features=32, out_features=32, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=True)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=32, out_features=128, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=128, out_features=32, bias=True)
          (drop): Dropout(p=0.0, inplace=True)
        )
      )
      (conv): SparseSequential(
        (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseConv3d(32, 64, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (u): UBlock(
        (blocks): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
        (transformer_block): SphereFormer(
          (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (attn): SparseMultiheadSASphereConcat(
            (qkv): Linear(in_features=64, out_features=192, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=True)
            (proj): Linear(in_features=64, out_features=64, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=True)
          )
          (drop_path): DropPath(drop_prob=0.050)
          (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=64, out_features=256, bias=True)
            (act): GELU()
            (fc2): Linear(in_features=256, out_features=64, bias=True)
            (drop): Dropout(p=0.0, inplace=True)
          )
        )
        (conv): SparseSequential(
          (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseConv3d(64, 128, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (u): UBlock(
          (blocks): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
          (transformer_block): SphereFormer(
            (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (attn): SparseMultiheadSASphereConcat(
              (qkv): Linear(in_features=128, out_features=384, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=True)
              (proj): Linear(in_features=128, out_features=128, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=True)
            )
            (drop_path): DropPath(drop_prob=0.100)
            (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=128, out_features=512, bias=True)
              (act): GELU()
              (fc2): Linear(in_features=512, out_features=128, bias=True)
              (drop): Dropout(p=0.0, inplace=True)
            )
          )
          (conv): SparseSequential(
            (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseConv3d(128, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (u): UBlock(
            (blocks): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
            (transformer_block): SphereFormer(
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (attn): SparseMultiheadSASphereConcat(
                (qkv): Linear(in_features=256, out_features=768, bias=True)
                (attn_drop): Dropout(p=0.0, inplace=True)
                (proj): Linear(in_features=256, out_features=256, bias=True)
                (proj_drop): Dropout(p=0.0, inplace=True)
              )
              (drop_path): DropPath(drop_prob=0.150)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=256, out_features=1024, bias=True)
                (act): GELU()
                (fc2): Linear(in_features=1024, out_features=256, bias=True)
                (drop): Dropout(p=0.0, inplace=True)
              )
            )
            (conv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (u): UBlock(
              (blocks): SparseSequential(
                (block0): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
                (block1): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
              )
              (transformer_block): SphereFormer(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): SparseMultiheadSASphereConcat(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=True)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=True)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=True)
                )
              )
            )
            (deconv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseInverseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (blocks_tail): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): SubMConv3d(512, 256, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(512, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(512, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
          )
          (deconv): SparseSequential(
            (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseInverseConv3d(256, 128, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (blocks_tail): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): SubMConv3d(256, 128, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(256, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
        )
        (deconv): SparseSequential(
          (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseInverseConv3d(128, 64, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (blocks_tail): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): SubMConv3d(128, 64, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(128, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
      )
      (deconv): SparseSequential(
        (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseInverseConv3d(64, 32, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (blocks_tail): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): SubMConv3d(64, 32, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
    )
    (output_layer): SparseSequential(
      (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
      (1): ReLU()
    )
    (linear): Linear(in_features=32, out_features=16, bias=True)
  )
)
[07/27 11:40:20] main-logger INFO: #Model parameters: 32311616
[07/27 11:40:20] main-logger INFO: class_weight: None
[07/27 11:40:20] main-logger INFO: loss_name: ce_loss
[07/27 11:40:20] main-logger INFO: => no weight found at './model_nuscenes/archive'
[07/27 11:40:20] main-logger INFO: train_data samples: '5512'
[07/27 11:40:20] main-logger INFO: val_data samples: '28637'
[07/27 11:40:20] main-logger INFO: scheduler: Poly. scheduler_update: step
[07/27 11:40:20] main-logger INFO: >>>>>>>>>>>>>>>> Start Evaluation >>>>>>>>>>>>>>>>
[07/27 11:40:56] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 16
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:6789
distributed: False
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: False
ngpus_per_node: 1
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: False
train_gpu: [0]
transformer_lr_scale: 0.1
use_amp: True
use_tta: True
use_xyz: True
val: True
vote_num: 1
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: ./model_nuscenes/archive/data.pkl
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 16
world_size: 1
xyz_norm: False
[07/27 11:40:58] main-logger INFO: => creating model ...
[07/27 11:40:58] main-logger INFO: Classes: 16
[07/27 11:40:58] main-logger INFO: DataParallel(
  (module): Semantic(
    (input_conv): SparseSequential(
      (0): SubMConv3d(4, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    )
    (unet): UBlock(
      (blocks): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
      (transformer_block): SphereFormer(
        (norm1): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (attn): SparseMultiheadSASphereConcat(
          (qkv): Linear(in_features=32, out_features=96, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=True)
          (proj): Linear(in_features=32, out_features=32, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=True)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=32, out_features=128, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=128, out_features=32, bias=True)
          (drop): Dropout(p=0.0, inplace=True)
        )
      )
      (conv): SparseSequential(
        (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseConv3d(32, 64, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (u): UBlock(
        (blocks): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
        (transformer_block): SphereFormer(
          (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (attn): SparseMultiheadSASphereConcat(
            (qkv): Linear(in_features=64, out_features=192, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=True)
            (proj): Linear(in_features=64, out_features=64, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=True)
          )
          (drop_path): DropPath(drop_prob=0.050)
          (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=64, out_features=256, bias=True)
            (act): GELU()
            (fc2): Linear(in_features=256, out_features=64, bias=True)
            (drop): Dropout(p=0.0, inplace=True)
          )
        )
        (conv): SparseSequential(
          (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseConv3d(64, 128, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (u): UBlock(
          (blocks): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
          (transformer_block): SphereFormer(
            (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (attn): SparseMultiheadSASphereConcat(
              (qkv): Linear(in_features=128, out_features=384, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=True)
              (proj): Linear(in_features=128, out_features=128, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=True)
            )
            (drop_path): DropPath(drop_prob=0.100)
            (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=128, out_features=512, bias=True)
              (act): GELU()
              (fc2): Linear(in_features=512, out_features=128, bias=True)
              (drop): Dropout(p=0.0, inplace=True)
            )
          )
          (conv): SparseSequential(
            (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseConv3d(128, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (u): UBlock(
            (blocks): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
            (transformer_block): SphereFormer(
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (attn): SparseMultiheadSASphereConcat(
                (qkv): Linear(in_features=256, out_features=768, bias=True)
                (attn_drop): Dropout(p=0.0, inplace=True)
                (proj): Linear(in_features=256, out_features=256, bias=True)
                (proj_drop): Dropout(p=0.0, inplace=True)
              )
              (drop_path): DropPath(drop_prob=0.150)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=256, out_features=1024, bias=True)
                (act): GELU()
                (fc2): Linear(in_features=1024, out_features=256, bias=True)
                (drop): Dropout(p=0.0, inplace=True)
              )
            )
            (conv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (u): UBlock(
              (blocks): SparseSequential(
                (block0): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
                (block1): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
              )
              (transformer_block): SphereFormer(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): SparseMultiheadSASphereConcat(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=True)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=True)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=True)
                )
              )
            )
            (deconv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseInverseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (blocks_tail): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): SubMConv3d(512, 256, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(512, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(512, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
          )
          (deconv): SparseSequential(
            (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseInverseConv3d(256, 128, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (blocks_tail): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): SubMConv3d(256, 128, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(256, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
        )
        (deconv): SparseSequential(
          (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseInverseConv3d(128, 64, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (blocks_tail): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): SubMConv3d(128, 64, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(128, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
      )
      (deconv): SparseSequential(
        (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseInverseConv3d(64, 32, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (blocks_tail): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): SubMConv3d(64, 32, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
    )
    (output_layer): SparseSequential(
      (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
      (1): ReLU()
    )
    (linear): Linear(in_features=32, out_features=16, bias=True)
  )
)
[07/27 11:40:58] main-logger INFO: #Model parameters: 32311616
[07/27 11:40:58] main-logger INFO: class_weight: None
[07/27 11:40:58] main-logger INFO: loss_name: ce_loss
[07/27 11:40:58] main-logger INFO: => loading weight './model_nuscenes/archive/data.pkl'
[07/27 12:31:00] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 8
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:6789
distributed: False
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: False
ngpus_per_node: 1
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: False
train_gpu: [0]
transformer_lr_scale: 0.1
use_amp: True
use_tta: False
use_xyz: True
val: False
vote_num: 4
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: ./model_nuscenes/archive/data.pkl
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 2
world_size: 1
xyz_norm: False
[07/27 12:31:01] main-logger INFO: => creating model ...
[07/27 12:31:01] main-logger INFO: Classes: 16
[07/27 12:31:01] main-logger INFO: DataParallel(
  (module): Semantic(
    (input_conv): SparseSequential(
      (0): SubMConv3d(4, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    )
    (unet): UBlock(
      (blocks): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
      (transformer_block): SphereFormer(
        (norm1): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (attn): SparseMultiheadSASphereConcat(
          (qkv): Linear(in_features=32, out_features=96, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=True)
          (proj): Linear(in_features=32, out_features=32, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=True)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=32, out_features=128, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=128, out_features=32, bias=True)
          (drop): Dropout(p=0.0, inplace=True)
        )
      )
      (conv): SparseSequential(
        (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseConv3d(32, 64, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (u): UBlock(
        (blocks): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
        (transformer_block): SphereFormer(
          (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (attn): SparseMultiheadSASphereConcat(
            (qkv): Linear(in_features=64, out_features=192, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=True)
            (proj): Linear(in_features=64, out_features=64, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=True)
          )
          (drop_path): DropPath(drop_prob=0.050)
          (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=64, out_features=256, bias=True)
            (act): GELU()
            (fc2): Linear(in_features=256, out_features=64, bias=True)
            (drop): Dropout(p=0.0, inplace=True)
          )
        )
        (conv): SparseSequential(
          (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseConv3d(64, 128, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (u): UBlock(
          (blocks): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
          (transformer_block): SphereFormer(
            (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (attn): SparseMultiheadSASphereConcat(
              (qkv): Linear(in_features=128, out_features=384, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=True)
              (proj): Linear(in_features=128, out_features=128, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=True)
            )
            (drop_path): DropPath(drop_prob=0.100)
            (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=128, out_features=512, bias=True)
              (act): GELU()
              (fc2): Linear(in_features=512, out_features=128, bias=True)
              (drop): Dropout(p=0.0, inplace=True)
            )
          )
          (conv): SparseSequential(
            (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseConv3d(128, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (u): UBlock(
            (blocks): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
            (transformer_block): SphereFormer(
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (attn): SparseMultiheadSASphereConcat(
                (qkv): Linear(in_features=256, out_features=768, bias=True)
                (attn_drop): Dropout(p=0.0, inplace=True)
                (proj): Linear(in_features=256, out_features=256, bias=True)
                (proj_drop): Dropout(p=0.0, inplace=True)
              )
              (drop_path): DropPath(drop_prob=0.150)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=256, out_features=1024, bias=True)
                (act): GELU()
                (fc2): Linear(in_features=1024, out_features=256, bias=True)
                (drop): Dropout(p=0.0, inplace=True)
              )
            )
            (conv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (u): UBlock(
              (blocks): SparseSequential(
                (block0): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
                (block1): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
              )
              (transformer_block): SphereFormer(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): SparseMultiheadSASphereConcat(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=True)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=True)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=True)
                )
              )
            )
            (deconv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseInverseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (blocks_tail): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): SubMConv3d(512, 256, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(512, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(512, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
          )
          (deconv): SparseSequential(
            (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseInverseConv3d(256, 128, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (blocks_tail): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): SubMConv3d(256, 128, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(256, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
        )
        (deconv): SparseSequential(
          (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseInverseConv3d(128, 64, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (blocks_tail): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): SubMConv3d(128, 64, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(128, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
      )
      (deconv): SparseSequential(
        (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseInverseConv3d(64, 32, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (blocks_tail): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): SubMConv3d(64, 32, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
    )
    (output_layer): SparseSequential(
      (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
      (1): ReLU()
    )
    (linear): Linear(in_features=32, out_features=16, bias=True)
  )
)
[07/27 12:31:01] main-logger INFO: #Model parameters: 32311616
[07/27 12:31:01] main-logger INFO: class_weight: None
[07/27 12:31:01] main-logger INFO: loss_name: ce_loss
[07/27 12:31:01] main-logger INFO: => loading weight './model_nuscenes/archive/data.pkl'
[07/27 12:31:40] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 8
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:6789
distributed: False
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: False
ngpus_per_node: 1
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: False
train_gpu: [0]
transformer_lr_scale: 0.1
use_amp: True
use_tta: False
use_xyz: True
val: False
vote_num: 4
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: None
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 2
world_size: 1
xyz_norm: False
[07/27 12:31:41] main-logger INFO: => creating model ...
[07/27 12:31:41] main-logger INFO: Classes: 16
[07/27 12:31:41] main-logger INFO: DataParallel(
  (module): Semantic(
    (input_conv): SparseSequential(
      (0): SubMConv3d(4, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    )
    (unet): UBlock(
      (blocks): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
      (transformer_block): SphereFormer(
        (norm1): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (attn): SparseMultiheadSASphereConcat(
          (qkv): Linear(in_features=32, out_features=96, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=True)
          (proj): Linear(in_features=32, out_features=32, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=True)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=32, out_features=128, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=128, out_features=32, bias=True)
          (drop): Dropout(p=0.0, inplace=True)
        )
      )
      (conv): SparseSequential(
        (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseConv3d(32, 64, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (u): UBlock(
        (blocks): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
        (transformer_block): SphereFormer(
          (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (attn): SparseMultiheadSASphereConcat(
            (qkv): Linear(in_features=64, out_features=192, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=True)
            (proj): Linear(in_features=64, out_features=64, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=True)
          )
          (drop_path): DropPath(drop_prob=0.050)
          (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=64, out_features=256, bias=True)
            (act): GELU()
            (fc2): Linear(in_features=256, out_features=64, bias=True)
            (drop): Dropout(p=0.0, inplace=True)
          )
        )
        (conv): SparseSequential(
          (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseConv3d(64, 128, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (u): UBlock(
          (blocks): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
          (transformer_block): SphereFormer(
            (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (attn): SparseMultiheadSASphereConcat(
              (qkv): Linear(in_features=128, out_features=384, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=True)
              (proj): Linear(in_features=128, out_features=128, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=True)
            )
            (drop_path): DropPath(drop_prob=0.100)
            (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=128, out_features=512, bias=True)
              (act): GELU()
              (fc2): Linear(in_features=512, out_features=128, bias=True)
              (drop): Dropout(p=0.0, inplace=True)
            )
          )
          (conv): SparseSequential(
            (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseConv3d(128, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (u): UBlock(
            (blocks): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
            (transformer_block): SphereFormer(
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (attn): SparseMultiheadSASphereConcat(
                (qkv): Linear(in_features=256, out_features=768, bias=True)
                (attn_drop): Dropout(p=0.0, inplace=True)
                (proj): Linear(in_features=256, out_features=256, bias=True)
                (proj_drop): Dropout(p=0.0, inplace=True)
              )
              (drop_path): DropPath(drop_prob=0.150)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=256, out_features=1024, bias=True)
                (act): GELU()
                (fc2): Linear(in_features=1024, out_features=256, bias=True)
                (drop): Dropout(p=0.0, inplace=True)
              )
            )
            (conv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (u): UBlock(
              (blocks): SparseSequential(
                (block0): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
                (block1): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
              )
              (transformer_block): SphereFormer(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): SparseMultiheadSASphereConcat(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=True)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=True)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=True)
                )
              )
            )
            (deconv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseInverseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (blocks_tail): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): SubMConv3d(512, 256, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(512, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(512, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
          )
          (deconv): SparseSequential(
            (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseInverseConv3d(256, 128, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (blocks_tail): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): SubMConv3d(256, 128, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(256, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
        )
        (deconv): SparseSequential(
          (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseInverseConv3d(128, 64, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (blocks_tail): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): SubMConv3d(128, 64, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(128, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
      )
      (deconv): SparseSequential(
        (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseInverseConv3d(64, 32, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (blocks_tail): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): SubMConv3d(64, 32, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
    )
    (output_layer): SparseSequential(
      (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
      (1): ReLU()
    )
    (linear): Linear(in_features=32, out_features=16, bias=True)
  )
)
[07/27 12:31:41] main-logger INFO: #Model parameters: 32311616
[07/27 12:31:41] main-logger INFO: class_weight: None
[07/27 12:31:41] main-logger INFO: loss_name: ce_loss
[07/27 12:31:42] main-logger INFO: train_data samples: '5512'
[07/27 12:31:42] main-logger INFO: val_data samples: '28637'
[07/27 12:31:42] main-logger INFO: scheduler: Poly. scheduler_update: step
[07/27 12:31:42] main-logger INFO: lr: [0.006, 0.0006000000000000001]
[07/27 12:32:21] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 4
batch_size_val: 8
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:6789
distributed: False
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: False
ngpus_per_node: 1
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: False
train_gpu: [0]
transformer_lr_scale: 0.1
use_amp: True
use_tta: False
use_xyz: True
val: False
vote_num: 4
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: None
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 1
world_size: 1
xyz_norm: False
[07/27 12:32:23] main-logger INFO: => creating model ...
[07/27 12:32:23] main-logger INFO: Classes: 16
[07/27 12:32:23] main-logger INFO: DataParallel(
  (module): Semantic(
    (input_conv): SparseSequential(
      (0): SubMConv3d(4, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    )
    (unet): UBlock(
      (blocks): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
      (transformer_block): SphereFormer(
        (norm1): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (attn): SparseMultiheadSASphereConcat(
          (qkv): Linear(in_features=32, out_features=96, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=True)
          (proj): Linear(in_features=32, out_features=32, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=True)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=32, out_features=128, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=128, out_features=32, bias=True)
          (drop): Dropout(p=0.0, inplace=True)
        )
      )
      (conv): SparseSequential(
        (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseConv3d(32, 64, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (u): UBlock(
        (blocks): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
        (transformer_block): SphereFormer(
          (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (attn): SparseMultiheadSASphereConcat(
            (qkv): Linear(in_features=64, out_features=192, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=True)
            (proj): Linear(in_features=64, out_features=64, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=True)
          )
          (drop_path): DropPath(drop_prob=0.050)
          (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=64, out_features=256, bias=True)
            (act): GELU()
            (fc2): Linear(in_features=256, out_features=64, bias=True)
            (drop): Dropout(p=0.0, inplace=True)
          )
        )
        (conv): SparseSequential(
          (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseConv3d(64, 128, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (u): UBlock(
          (blocks): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
          (transformer_block): SphereFormer(
            (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (attn): SparseMultiheadSASphereConcat(
              (qkv): Linear(in_features=128, out_features=384, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=True)
              (proj): Linear(in_features=128, out_features=128, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=True)
            )
            (drop_path): DropPath(drop_prob=0.100)
            (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=128, out_features=512, bias=True)
              (act): GELU()
              (fc2): Linear(in_features=512, out_features=128, bias=True)
              (drop): Dropout(p=0.0, inplace=True)
            )
          )
          (conv): SparseSequential(
            (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseConv3d(128, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (u): UBlock(
            (blocks): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
            (transformer_block): SphereFormer(
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (attn): SparseMultiheadSASphereConcat(
                (qkv): Linear(in_features=256, out_features=768, bias=True)
                (attn_drop): Dropout(p=0.0, inplace=True)
                (proj): Linear(in_features=256, out_features=256, bias=True)
                (proj_drop): Dropout(p=0.0, inplace=True)
              )
              (drop_path): DropPath(drop_prob=0.150)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=256, out_features=1024, bias=True)
                (act): GELU()
                (fc2): Linear(in_features=1024, out_features=256, bias=True)
                (drop): Dropout(p=0.0, inplace=True)
              )
            )
            (conv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (u): UBlock(
              (blocks): SparseSequential(
                (block0): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
                (block1): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
              )
              (transformer_block): SphereFormer(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): SparseMultiheadSASphereConcat(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=True)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=True)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=True)
                )
              )
            )
            (deconv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseInverseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (blocks_tail): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): SubMConv3d(512, 256, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(512, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(512, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
          )
          (deconv): SparseSequential(
            (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseInverseConv3d(256, 128, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (blocks_tail): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): SubMConv3d(256, 128, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(256, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
        )
        (deconv): SparseSequential(
          (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseInverseConv3d(128, 64, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (blocks_tail): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): SubMConv3d(128, 64, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(128, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
      )
      (deconv): SparseSequential(
        (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseInverseConv3d(64, 32, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (blocks_tail): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): SubMConv3d(64, 32, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
    )
    (output_layer): SparseSequential(
      (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
      (1): ReLU()
    )
    (linear): Linear(in_features=32, out_features=16, bias=True)
  )
)
[07/27 12:32:23] main-logger INFO: #Model parameters: 32311616
[07/27 12:32:23] main-logger INFO: class_weight: None
[07/27 12:32:23] main-logger INFO: loss_name: ce_loss
[07/27 12:32:23] main-logger INFO: train_data samples: '5512'
[07/27 12:32:23] main-logger INFO: val_data samples: '28637'
[07/27 12:32:23] main-logger INFO: scheduler: Poly. scheduler_update: step
[07/27 12:32:23] main-logger INFO: lr: [0.006, 0.0006000000000000001]
[07/27 12:33:34] main-logger INFO: a: 0.0125
arch: unet_spherical_transformer
aug: True
base_lr: 0.006
batch_size: 4
batch_size_val: 4
block_reps: 2
block_residual: True
classes: 16
data_name: nuscenes
data_root: /data/sets/nuscenes/v1.0-trainval/
dist_backend: nccl
dist_url: tcp://127.0.0.1:6789
distributed: False
drop_path_rate: 0.3
drop_rate: 0.5
epochs: 50
eval_freq: 1
evaluate: True
fea_dim: 6
grad_checkpoint_layers: []
ignore_label: 255
input_c: 4
label_mapping: util/nuscenes.yaml
layers: [32, 64, 128, 256, 256]
loss_name: ce_loss
m: 32
manual_seed: 123
max_batch_points: 250000
momentum: 0.9
multiprocessing_distributed: False
ngpus_per_node: 1
patch_size: [0.1 0.1 0.1]
power: 0.9
print_freq: 10
quant_size_scale: 24
rank: 0
rel_key: True
rel_query: True
rel_value: True
resume: None
save_freq: 1
save_path: runs/nuscenes_unet32_spherical_transformer
scheduler: Poly
scheduler_update: step
sphere_layers: [1, 2, 3, 4, 5]
start_epoch: 0
sync_bn: False
train_gpu: [0]
transformer_lr_scale: 0.1
use_amp: True
use_tta: False
use_xyz: True
val: False
vote_num: 4
voxel_max: 120000
voxel_size: [0.1, 0.1, 0.1]
weight: None
weight_decay: 0.01
window_size: 6
window_size_scale: [2.0, 2.0]
window_size_sphere: [2, 2, 120]
workers: 1
world_size: 1
xyz_norm: False
[07/27 12:33:35] main-logger INFO: => creating model ...
[07/27 12:33:35] main-logger INFO: Classes: 16
[07/27 12:33:35] main-logger INFO: DataParallel(
  (module): Semantic(
    (input_conv): SparseSequential(
      (0): SubMConv3d(4, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
    )
    (unet): UBlock(
      (blocks): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
      (transformer_block): SphereFormer(
        (norm1): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (attn): SparseMultiheadSASphereConcat(
          (qkv): Linear(in_features=32, out_features=96, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=True)
          (proj): Linear(in_features=32, out_features=32, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=True)
        )
        (drop_path): Identity()
        (norm2): LayerNorm((32,), eps=1e-05, elementwise_affine=True)
        (mlp): Mlp(
          (fc1): Linear(in_features=32, out_features=128, bias=True)
          (act): GELU()
          (fc2): Linear(in_features=128, out_features=32, bias=True)
          (drop): Dropout(p=0.0, inplace=True)
        )
      )
      (conv): SparseSequential(
        (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseConv3d(32, 64, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (u): UBlock(
        (blocks): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
        (transformer_block): SphereFormer(
          (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (attn): SparseMultiheadSASphereConcat(
            (qkv): Linear(in_features=64, out_features=192, bias=True)
            (attn_drop): Dropout(p=0.0, inplace=True)
            (proj): Linear(in_features=64, out_features=64, bias=True)
            (proj_drop): Dropout(p=0.0, inplace=True)
          )
          (drop_path): DropPath(drop_prob=0.050)
          (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
          (mlp): Mlp(
            (fc1): Linear(in_features=64, out_features=256, bias=True)
            (act): GELU()
            (fc2): Linear(in_features=256, out_features=64, bias=True)
            (drop): Dropout(p=0.0, inplace=True)
          )
        )
        (conv): SparseSequential(
          (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseConv3d(64, 128, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (u): UBlock(
          (blocks): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
          (transformer_block): SphereFormer(
            (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (attn): SparseMultiheadSASphereConcat(
              (qkv): Linear(in_features=128, out_features=384, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=True)
              (proj): Linear(in_features=128, out_features=128, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=True)
            )
            (drop_path): DropPath(drop_prob=0.100)
            (norm2): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=128, out_features=512, bias=True)
              (act): GELU()
              (fc2): Linear(in_features=512, out_features=128, bias=True)
              (drop): Dropout(p=0.0, inplace=True)
            )
          )
          (conv): SparseSequential(
            (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseConv3d(128, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (u): UBlock(
            (blocks): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
            (transformer_block): SphereFormer(
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (attn): SparseMultiheadSASphereConcat(
                (qkv): Linear(in_features=256, out_features=768, bias=True)
                (attn_drop): Dropout(p=0.0, inplace=True)
                (proj): Linear(in_features=256, out_features=256, bias=True)
                (proj_drop): Dropout(p=0.0, inplace=True)
              )
              (drop_path): DropPath(drop_prob=0.150)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (mlp): Mlp(
                (fc1): Linear(in_features=256, out_features=1024, bias=True)
                (act): GELU()
                (fc2): Linear(in_features=1024, out_features=256, bias=True)
                (drop): Dropout(p=0.0, inplace=True)
              )
            )
            (conv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[2, 2, 2], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (u): UBlock(
              (blocks): SparseSequential(
                (block0): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
                (block1): ResidualBlock(
                  (i_branch): SparseSequential(
                    (0): Identity()
                  )
                  (conv_branch): SparseSequential(
                    (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (1): ReLU()
                    (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                    (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                    (4): ReLU()
                    (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  )
                )
              )
              (transformer_block): SphereFormer(
                (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (attn): SparseMultiheadSASphereConcat(
                  (qkv): Linear(in_features=256, out_features=768, bias=True)
                  (attn_drop): Dropout(p=0.0, inplace=True)
                  (proj): Linear(in_features=256, out_features=256, bias=True)
                  (proj_drop): Dropout(p=0.0, inplace=True)
                )
                (drop_path): DropPath(drop_prob=0.200)
                (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                (mlp): Mlp(
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (act): GELU()
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (drop): Dropout(p=0.0, inplace=True)
                )
              )
            )
            (deconv): SparseSequential(
              (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SparseInverseConv3d(256, 256, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
            )
            (blocks_tail): SparseSequential(
              (block0): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): SubMConv3d(512, 256, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(512, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(512, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
              (block1): ResidualBlock(
                (i_branch): SparseSequential(
                  (0): Identity()
                )
                (conv_branch): SparseSequential(
                  (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (1): ReLU()
                  (2): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                  (3): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                  (4): ReLU()
                  (5): SubMConv3d(256, 256, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                )
              )
            )
          )
          (deconv): SparseSequential(
            (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SparseInverseConv3d(256, 128, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
          )
          (blocks_tail): SparseSequential(
            (block0): ResidualBlock(
              (i_branch): SparseSequential(
                (0): SubMConv3d(256, 128, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(256, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(256, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
            (block1): ResidualBlock(
              (i_branch): SparseSequential(
                (0): Identity()
              )
              (conv_branch): SparseSequential(
                (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (1): ReLU()
                (2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (3): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
                (4): ReLU()
                (5): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              )
            )
          )
        )
        (deconv): SparseSequential(
          (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
          (1): ReLU()
          (2): SparseInverseConv3d(128, 64, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
        )
        (blocks_tail): SparseSequential(
          (block0): ResidualBlock(
            (i_branch): SparseSequential(
              (0): SubMConv3d(128, 64, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(128, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(128, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
          (block1): ResidualBlock(
            (i_branch): SparseSequential(
              (0): Identity()
            )
            (conv_branch): SparseSequential(
              (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (1): ReLU()
              (2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
              (3): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
              (4): ReLU()
              (5): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            )
          )
        )
      )
      (deconv): SparseSequential(
        (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
        (1): ReLU()
        (2): SparseInverseConv3d(64, 32, kernel_size=[2, 2, 2], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.Native)
      )
      (blocks_tail): SparseSequential(
        (block0): ResidualBlock(
          (i_branch): SparseSequential(
            (0): SubMConv3d(64, 32, kernel_size=[1, 1, 1], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(64, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(64, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
        (block1): ResidualBlock(
          (i_branch): SparseSequential(
            (0): Identity()
          )
          (conv_branch): SparseSequential(
            (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (1): ReLU()
            (2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (3): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          )
        )
      )
    )
    (output_layer): SparseSequential(
      (0): BatchNorm1d(32, eps=0.0001, momentum=0.1, affine=True, track_running_stats=True)
      (1): ReLU()
    )
    (linear): Linear(in_features=32, out_features=16, bias=True)
  )
)
[07/27 12:33:35] main-logger INFO: #Model parameters: 32311616
[07/27 12:33:35] main-logger INFO: class_weight: None
[07/27 12:33:35] main-logger INFO: loss_name: ce_loss
[07/27 12:33:35] main-logger INFO: train_data samples: '5512'
[07/27 12:33:36] main-logger INFO: val_data samples: '28637'
[07/27 12:33:36] main-logger INFO: scheduler: Poly. scheduler_update: step
[07/27 12:33:36] main-logger INFO: lr: [0.006, 0.0006000000000000001]
